'''
In MATLAB, there is a very useful function called 'reshape', which can reshape a matrix into a new one with different size but keep its original data.

You're given a matrix represented by a two-dimensional array, and two positive integers r and c representing the row number and column number of the wanted reshaped matrix, respectively.

The reshaped matrix need to be filled with all the elements of the original matrix in the same row-traversing order as they were.

If the 'reshape' operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.

Example 1:
Input: 
nums = 
[[1,2],
 [3,4]]
r = 1, c = 4
Output: 
[[1,2,3,4]]
Explanation:
The row-traversing of nums is [1,2,3,4]. The new reshaped matrix is a 1 * 4 matrix, fill it row by row by using the previous list.
Example 2:
Input: 
nums = 
[[1,2],
 [3,4]]
r = 2, c = 4
Output: 
[[1,2],
 [3,4]]
Explanation:
There is no way to reshape a 2 * 2 matrix to a 2 * 4 matrix. So output the original matrix.
Note:
The height and width of the given matrix is in range [1, 100].
The given r and c are all positive.
'''
##要求：给定一个二维数组和正整数r、c,如果r*c=数组的shape，则输出r*c的数组，否则输出原数组。
##思路：如下代码
class Solution:
    def matrixReshape(self, nums, r, c):
        """
        :type nums: List[List[int]]
        :type r: int
        :type c: int
        :rtype: List[List[int]]
        """
        h,w = len(nums),len(nums[0])
        if h*w != r*c:
            return nums
        ans = []               
        p = q = 0
        
        ##这块是重点，也是巧妙之处，运用两次循环
        for x in range(r):         ###表示有几行
            row = []
            for y in range(c):   ######表示有几列
                row.append(nums[p][q])
                q += 1
                if q == w:     ###因为是二维数组，所以nums中的每个元素列表中只有2个元素
                    p += 1
                    q = 0
            ans.append(row)
        return ans
        
        
        
